create table if not exists profiles (id uuid primary key references auth.users(id) on delete cascade, full_name text, role text check (role in ('admin','tiler','homeowner')) default 'homeowner');
create table if not exists site_settings (id int primary key default 1, estimator_href text default '/estimator');
create table if not exists homepage_banners (id bigserial primary key, image_url text not null, href text, title text, is_active boolean default true, sort_order int default 0);
create table if not exists services (id bigserial primary key, title text not null, description text, icon_url text, href text, is_active boolean default true, sort_order int default 0);
create table if not exists tilers (id bigserial primary key, name text not null, city text, avatar_url text, rating numeric);
create table if not exists evaluations (id bigserial primary key, tiler_id bigint references tilers(id) on delete cascade, score_quality numeric, score_service numeric, score_timeliness numeric, score_pricing numeric, score_cleanliness numeric);
create table if not exists leads (id bigserial primary key, name text, phone text, message text, created_at timestamp with time zone default now());
alter table profiles enable row level security;
alter table site_settings enable row level security;
alter table homepage_banners enable row level security;
alter table services enable row level security;
alter table tilers enable row level security;
alter table evaluations enable row level security;
alter table leads enable row level security;
create policy if not exists "public read settings" on site_settings for select using (true);
create policy if not exists "public read banners" on homepage_banners for select using (true);
create policy if not exists "public read services" on services for select using (true);
create policy if not exists "public read tilers" on tilers for select using (true);
create policy if not exists "public read evals" on evaluations for select using (true);
create policy if not exists "anon insert leads" on leads for insert with check (true);
create policy if not exists "admin write settings" on site_settings for all using ((select role from profiles where id = auth.uid()) = 'admin') with check ((select role from profiles where id = auth.uid()) = 'admin');
create policy if not exists "admin write banners" on homepage_banners for all using ((select role from profiles where id = auth.uid()) = 'admin') with check ((select role from profiles where id = auth.uid()) = 'admin');
create policy if not exists "admin write services" on services for all using ((select role from profiles where id = auth.uid()) = 'admin') with check ((select role from profiles where id = auth.uid()) = 'admin');
